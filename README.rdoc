= Sample Rails app on Docker

== Introduction to Docker

http://i.imgur.com/2c5iYX4.png

Docker is a Linux container and virtualization tool. It's more lightweight than virtual machines, that the host Linux kernel is shared by all Docker instances. Similar to virtual machines, each instance runs on an independent file system. The file system of Docker is layered, allows easy management of incremental changes and version control.

http://i.imgur.com/6xHD7Kl.png

OS X doesn't have the required Linux kernel. Therefore, when running on OS X, Docker runs on a Linux virtual machine (created by Docker Machine).

=== Vocabulary

container::
  A Docker instance that emulates a computer.
  
image::
  The "base class" of containers. Defines how a container is created. <code>debian</code>, <code>ubuntu</code>, <code>ruby</code>, and <code>mysql</code> are among the popular images. They are built from steps defined in a <code>Dockerfile</code>.
  
Docker Engine::
  Builds and manages Docker images. Runs and manages Docker containers.
  
Docker Compose::
  Organize multiple Docker containers. Many of its commands resemble the ones of Docker Engine.
  
Docker Machine::
  A virtual machine tool to create a Linux environment for Docker to run on Windows and OS X.

== Configuration

=== Installation

See https://docs.docker.com/engine/installation/mac

=== Dockerfile

<code>Dockerfile</code> defines how a single Docker image is built.

Docker caches for each line in <code>Dockerfile</code>, and will check modifications of files and use the corresponding cache to skip steps and speed up rebuilding. Therefore, lines that changes more often (such as <code>Gemfile</code>) should be put after lines that changes less often (such as <code>apt-get install build-essential</code>)

In this app two Docker images are built, the minimal one for essential and stable packages, and the other for all packages required. As long as the minimal one is not updated, building the complete one will be much faster than building from scratch. (Though Docker caches, a full <code>bundle install</code> is required to rebuild in case <code>Gemfile</code> changes since it's only one line)

The minimal <code>Dockerfile</code> is placed in <code>.docker/images/sample-app</code>.

The following are parts of the minimal <code>Dockerfile</code> that should be configured, marked as <code>TODO</code>.

1. <code>FROM ruby:2.2-slim</code> defines the base Docker image to be used. Ruby images can be found at https://hub.docker.com/_/ruby

1. <code>RUN apt-get install -y mysql-client libmysqlclient-dev</code> installs native libraries for <code>mysql2</code> gem. Those RubyGems with native extensions may need this step. Tools for development can also be installed here.

1. Sometimes <code>bundle install</code> may fail before some particular tweaks are made. These tweaks can be placed here.

1. <code>ENV RAILS_ROOT /var/www/sample_app</code> defines where the app will run in the Docker container.

1. The essential and stable parts of the gems required by the app can be placed here.

=== Docker Compose

<code>docker-compose.yml</code> defines how to organize multiple Docker containers as services into a single application, and allows for additional configurations for each container.

The following are the important labels to be configured in the file.

*links*::
  Allows connecting to another service by its service name, or an alias if specified.
  
*ports*::
  Expose ports of the container and provide mapping between ports of the Docker Engine (as in <code>dockerhost:*3000*</code>) and ports of the container (as in <code>rails s -p *3000*</code>).
  
  See "Usage" section for more about <code>dockerhost</code>.
  
*volumes*::
  * If a host path is specified before <code>:</code>, mounts directories of the host system to the container.
  
    See "Volume Mounting" section for issues caused by this feature.
    
  * If a name is specified before <code>:</code>, mounts directories managed by Docker to the container, which also preserves data even if the container is deleted.
  
The following labels might also be useful.

build::
  Call <code>docker build</code> with the <code>Dockerfile</code> specified to build the image for the service container.
  
command::
  The command that will be run when the container starts. Overrides <code>COMMAND</code> in <code>Dockerfile</code>.
  Should be placed in brackets to be <code>exec</code>ed and keeps PID = 1.
  
env_file::
  The list of environment variables to be set. Sensitive strings such as database password can be place here.

image::
  Directly use a Docker base image without a <code>Dockerfile</code> build.
  
=== .docker Folder

<code>.docker</code> folder includes scripts for the container entrypoint, starting containers, starting bash sessions, synchronizing timezone, etc.

The following are files that might need configurations.

* <code>.docker/init.sh</code> will be used to initialize the containers, and <code>.docker/server.sh</code> will be used to start the server.

* <code>.docker/images/build</code> will be used to build the base images.

* <code>.docker/env/*.env</code> are the environment variable files. See "Usage" section for more about <code>.docker/env/*.env</code>.

=== Ignore

<code>.dockerignore</code> defines files to be excluded when copied in <code>Dockerfile</code>. Files won't be excluded when mounted.

<code>.gitignore</code> should include <code>.docker/env/*.env</code>.

== Usage

* Make <code>.docker/env/*.env</code> files based on <code>.docker/env/*.env.example</code>. These files should include all configurations for connections between Docker containers, such as MySQL, Mongo, and Redis setup. Setup <code>config/*.yml</code> files accordingly.

* Starts "Docker Quickstart Terminal" from Launchpad. After it completes startup it will display the current Docker host IP address. It will be referred to as <code><DockerHost></code> later, and can be found by running <code>docker-machine ip</code>.

  Alternatively, after running <code>docker-machine start</code>, a terminal with <code>eval "$(docker-machine env)"</code> (in <code>~/.bash_profile</code>, etc) run will also work.

* Go to the app root directory, and run 

    .docker/build -b
    .docker/start -s app
    
* Open <code><DockerHost>:3003</code> in browser to see the running app!

  It might help to put <code><DockerHost> dockerhost</code> in the <code>hosts</code> file.

=== Development

* Run <code>.docker/bash</code> in another terminal tab to start a console in the app container for debugging, etc.

  Note that <code>.docker/bash -c db</code> connects to the database container. Check <code>.docker/bash -h</code> for details.
  
* <code>docker-compose up</code> will automatically starts the default app (Rails server in this project). Run <code>.docker/start -b</code> or <code>.docker/bash</code> when the container is stopped to prevent the default app from starting (e.g. when installing new gems). Check <code>.docker/start -h</code> for details.

== Issues

=== Volume Mounting

http://i.imgur.com/Mp8noLt.png

As shown in the graph above, Docker can mount host directories directly as container volumes. Normally it's used to mount the source folder to avoid <code>docker-compose build</code> after every code update on the host. Changes made by the container (such as an update to <code>vendor/cache</code> by <code>bundle package</code>) will also be stored by the host.

However, this creates some issues.

1. The extra layer of Docker Machine on OS X slows the mount down. From the container perspective, the host directories referred here are actually Docker Machine folders, which are the host directories shared by Docker Machine through VirtualBox file sharing.

1. The file events will not be passed by VirtualBox, so Linux file event interfaces (such as <code>inotify</code>) will not work. 

1. For mounted host directories, permissions on the mounted file system originates from the host file system, and cannot be altered by the container.

* MySQL and PostgreSQL will attempt to take ownership of its data directory. Mounting the data directory to the host (for backing up, etc) will prevent them from doing so and successfully starting up.
  
* However, their corresponding Docker images define their data directories as volumes managed by Docker, so it's easy to access it from another container. For example, declaring the following lines in <code>docker-compose.yml</code> allows the app container to access the data directory of the database container by the same path (e.g. <code>/var/lib/mysql</code>).
  
    app:
      volumes_from:
        - db
  
* Run <code>docker volume inspect <Volume></code> to find the actual volume path. They can be directly accessed in the virtual machine through <code>docker-machine ssh</code>. 
  
==== Dinghy

http://i.imgur.com/2SXLWxX.png

Dinghy (https://github.com/codekitchen/dinghy) is a third-party tool to improve Docker on OS X. It creates its own Docker Machine using NFS, a faster file system than the default VirtualBox file sharing.

Dinghy addresses the first two issues. The NFS file system allows a faster Rails loading. Dinghy will also forward <code>FSEvents</code> on OS X to the Docker Machine, triggering <code>inotify</code>, etc.

Run <code>.docker/scripts/install-dinghy.sh</code> to install Dinghy, then run <code>dinghy up</code> to start Dinghy daemon if it's not running. Run <code>eval $(dinghy env)</code> (or use <code>~/.bash_profile</code>, etc) to set environment variables for Dinghy.

This virtual machine can be accessed through <code>dinghy ssh</code>.

=== Docker Build

(<code>OPTIONAL</code> section of <code>Dockerfile</code>)

After <code>Gemfile</code> is updated, <code>docker-compose build</code> can take a long time to finish, since all gems will be reinstalled. This can be alleviated by making a separate <code>Gemfile</code> containing the essential and stable parts of the original <code>Gemfile</code>. Installing the minimal <code>Gemfile</code> before the complete one will force Docker to cache for it, so that stable gems will be skipped when reinstalling the complete one. However, note that it can cause multiple versions of the same gem being installed, leading to a "dirty" Docker image where <code>bundle exec</code> is always necessary.

== Performance

Benchmarks are run to evaluate the performance of Docker containers against native development.

Setup: Apple OS X 10.11.4, Intel Core 2 Duo 3.06GHz, 16GB DDR3, Mechanical HDD.

=== Appserver Framework Loading

Command: <code>time echo exit | bundle exec rails console</code>

Average of three rounds after a warm-up round.

OS X native::
  40.86s

Dinghy::
  80.53s

=== Appserver Test Suite

Command: <code>time bundle exec rake spec</code>

The time in the rspec output is used to ignore the loading stage.

OS X native::
  40.25min

Dinghy::
  44.12min

== Tips and Troubleshooting

* Any changes to <code>docker-compose.yml</code> may cause Docker Compose to delete and recreate the containers from images. Except for those to the host and named volumes, all changes (such as the newly installed gem libraries and binaries) will be lost. <code>.docker/build</code> (without <code>-b</code>) can be run routinely to rebuild the Docker image to include changes. It can also be used to "clean up" the containers.

  Note that even though <code>docker-compose build</code> will run <code>bundle install</code>, during this stage, changes to the context folder (such as updating <code>Gemfile.lock</code> and <code>vendor/cache</code>) will be made on the image's file system, and thus will be hidden when the context folder from the host is mounted by Docker Compose. Therefore, it should not be used to install new gems, etc.

* The Docker Machine time and the host machine time may get out of sync, causing delays between file changes and Rails server reloading. Use <code>docker-machine ssh default 'sudo ntpclient -s -h pool.ntp.org'</code> (or <code>dinghy ssh 'sudo ntpclient -s -h pool.ntp.org'</code> if using Dinghy) to update the Docker Machine time.

  Timezone can also be different between the host machine and the Docker containers. Using <code>.docker/start</code> or <code>.docker/bash</code> will automatically update the container's timezone with the host machine's.

* The entrypoint script will automatically initialize the Rails database. Deleting <code>tmp/docker/init</code> forces it to initialize again.

* Run <code>.docker/scripts/cleanup.sh</code> will delete any non-running containers, dangling images, and dangling volumes on the entire host machine. Use with caution!

* Do not set RAILS_ENV or MYSQL_HOST in <code>.docker/.env</code>.
