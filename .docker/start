#!/usr/bin/env bash

# SIGWAITBASH=31
# SIGSKIPBASH=30
FOLDER_TEMP=tmp/docker

ARG_HELP=
ARG_DAEMON=
ARG_ARGUMENTS=
ARG_TIMEZONE=
ARG_CONTAINER=

while [[ $# > 0 ]]
do
  key="$1"
  case $key in
    -h|--help)
      ARG_HELP=YES
    ;;
    -d|--daemon)
      ARG_DAEMON="-d"
    ;;
    -b|--bash)
      ARG_ARGUMENTS="$ARG_ARGUMENTS -b"
    ;;
    -s|--server)
      ARG_ARGUMENTS="$ARG_ARGUMENTS -s"
    ;;
    -t|--timezone)
      ARG_TIMEZONE=YES
    ;;
    *)
      ARG_CONTAINER="$ARG_CONTAINER $key"
    ;;
  esac
  shift
done

if [[ -n "$ARG_HELP" ]]; then
  echo "Start a Docker container and its depencencies"
  echo "Usage:  $0 [OPTIONS] [CONTAINER...]"
  echo "  -d, --daemon      Start the container(s) in background"
  echo "  -b, --bash        Wait for bash"
  echo "  -s, --server      Start app server"
  echo "  -t, --timezone    Sync time zone with host machine (sudo required)"
  exit 0
fi

sendSignal() {
  while [[ -z "$OUTPUT_KILL" ]]; do
    OUTPUT_KILL="$(docker-compose kill -s $1 $ARG_CONTAINER 2>&1)"
    sleep 1
  done
}

sendArgument() {
  mkdir -p "$FOLDER_TEMP"
  FILE_ARGUMENT=$FOLDER_TEMP/args
  echo "$*" > "$FILE_ARGUMENT"
}

if [[ -n "$ARG_TIMEZONE" ]]; then
  echo "Requesting root for getting current system timezone"
  ARG_ARGUMENTS="$ARG_ARGUMENTS -t $(.docker/timezone.sh)"
fi

if [[ -n "$ARG_ARGUMENTS" ]]; then
  # sendSignal $SIGWAITBASH &
  # sendSignal $SIGSKIPBASH &
  sendArgument $ARG_ARGUMENTS
fi

docker-compose up $ARG_DAEMON $ARG_CONTAINER

# trap "kill $!" SIGINT
# wait $!
